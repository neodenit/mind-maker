@page "/"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Neodenit.MindMaker.Web.Shared

@inject HttpClient HttpClient
@inject Settings Settings

<div class="container-fluid">

    @if (promptSettings is not null)
    {
        <div class="input-group pb-2">
            <div class="input-group-prepend">
                <label for="engine" class="input-group-text">Engine</label>
            </div>

            <select id="engine" class="form-control" @bind="@promptSettings.Engine">
                @foreach (var (item, label) in EngineList.Items)
                {
                    <option value="@item">@label</option>
                }
            </select>
        </div>

        <div class="input-group pb-2">
            <div class="input-group-prepend">
                <label for="mode" class="input-group-text">Representation</label>
            </div>

            <select id="mode" class="form-control" @bind="@promptSettings.Mode">
                @foreach (var (item, label) in ModeList.Modes)
                {
                    <option value="@item">@label</option>
                }
            </select>
        </div>

        <div class="input-group pb-3">
            <div class="input-group-prepend">
                <label for="creativity" class="input-group-text">Creativity</label>
            </div>

            <select id="creativity" class="form-control" @bind="@promptSettings.Creativity">
                @foreach (var item in Creativity.Levels)
                {
                    <option value="@item">@item%</option>
                }
            </select>
        </div>
    }

    <h1>Mind Maps</h1>

    <div class="row">
        @for (int i = 0; i < layers.Count; i++)
        {
            var layer = layers[i];
            var index = i;

            <div class="col-sm">
                @if (HasNodes(i))
                {
                    <div class="form-group">

                        @foreach (var node in layer)
                        {
                            <button @onclick="() => NodeClickAsync(node, index)" class="@GetNodeStyle(i, node)">
                                @node.Name

                                @if (i > 0 && !node.IsOpened && node.Children.Any())
                                {
                                    <span class="badge badge-light float-right">@(Settings.EnableChildrenCount ? node.Children.Count().ToString() : Constants.Ellipsis)</span>
                                }
                            </button>
                        }

                    </div>
                }

                @if (i == 0 && !IsLoaded())
                {
                    <div class="alert alert-warning" role="alert">
                        Loading mind maps...
                    </div>
                }

                @if (IsLoaded() && !isAdding[i] && !isEditing[i] && (HasNodes(i) || i == 0 || !Settings.EnableQuickAdding && IsOpened(i - 1)))
                {
                    if (!(i == 0 && IsOpened(i)))
                    {
                        <button class="btn btn-outline-primary btn-block" type="submit" @onclick="() => StartAddingAsync(index)">+</button>
                    }

                    if (IsOpened(i))
                    {
                        <button class="btn btn-outline-secondary btn-block" type="button" @onclick="() => StartEditing(index)">Edit</button>
                    }
                }

                @if (isAdding[i])
                {
                    <form @onsubmit="() => AddAsync(newNodeName, index)">
                        @if (advice is not null)
                        {
                            if (advice.Any())
                            {
                                <div class="form-group">
                                    @foreach (var item in advice)
                                    {
                                        if (!string.IsNullOrEmpty(item))
                                        {
                                            <button class="btn btn-success btn-block" type="button" @onclick="() => AddAsync(item, index)">@item</button>
                                        }
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <div class="alert alert-warning" role="alert">
                                Loading advice...
                            </div>
                        }

                        <div class="form-group">
                            <input @bind="newNodeName" type="text" class="form-control" required autofocus />
                        </div>

                        <div class="form-group">
                            <button class="btn btn-outline-primary btn-block" type="submit">Add</button>
                            <button class="btn btn-outline-secondary btn-block" type="button" @onclick="() => Cancel(index)">Cancel</button>
                        </div>
                    </form>
                }

                @if (isEditing[i])
                {
                    <form @onsubmit="() => UpdateAsync(updatedNodeName, index)">
                        <div class="form-group">
                            <input @bind="updatedNodeName" type="text" class="form-control" required autofocus />
                        </div>

                        <div class="form-group">
                            <button class="btn btn-outline-primary btn-block" type="submit">Update</button>
                            <button class="btn btn-outline-danger btn-block" type="button" @onclick="() => DeleteAsync(index)">Delete</button>
                            <button class="btn btn-outline-secondary btn-block" type="button" @onclick="() => Cancel(index)">Cancel</button>
                        </div>
                    </form>
                }

            </div>
        }
    </div>
</div>

@code
{
    private string newNodeName;
    private string updatedNodeName;
    private IEnumerable<string> advice;

    private IEnumerable<NodeModel> mindMaps = Enumerable.Empty<NodeModel>();
    private PromptSettingsModel promptSettings;

    private IList<IEnumerable<NodeModel>> layers;
    private IList<bool> isAdding;
    private IList<bool> isEditing;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            layers = new IEnumerable<NodeModel>[Settings.MaxDepth];
            isAdding = new bool[Settings.MaxDepth];
            isEditing = new bool[Settings.MaxDepth];

            promptSettings = await HttpClient.GetFromJsonAsync<PromptSettingsModel>($"api/GetPromptSettings");

            mindMaps = await HttpClient.GetFromJsonAsync<IEnumerable<NodeModel>>($"api/MindMap");

            layers[0] = mindMaps;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task AddAsync(string itemName, int level)
    {
        var path = GetPath(level);
        var ids = path.Select(x => x.Id);

        var request = new CreateItemRequestModel { NewItemName = itemName, Path = ids };

        var newNodeMessage = await HttpClient.PostAsJsonAsync("api/MindMap", request);
        var newNode = await newNodeMessage.Content.ReadFromJsonAsync<NodeModel>();

        if (layers[level] is null)
        {
            layers[level] = Enumerable.Repeat(newNode, 1);
        }
        else
        {
            layers[level] = layers[level].Append(newNode);
        }

        if (level > 0)
        {
            var parentNode = layers[level - 1].Single(x => x.IsOpened);
            parentNode.Children = layers[level];
        }

        newNodeName = string.Empty;

        StopEditing();
    }

    private void Cancel(int level)
    {
        isAdding[level] = false;
        isEditing[level] = false;
        newNodeName = string.Empty;

        if (Settings.EnableQuickAdding && level > 0 && !layers[level].Any())
        {
            CloseNodes(level - 1);
        }
    }

    private async Task NodeClickAsync(NodeModel node, int level)
    {
        StopEditing();

        if (node.IsOpened)
        {
            HideLayers(level + 1);

            node.IsOpened = false;
        }
        else
        {
            if (node.Children.Any())
            {
                layers[level + 1] = node.Children;

                HideLayers(level + 2);
                CloseNodes(level);

                node.IsOpened = true;
            }
            else
            {
                CloseNodes(level);
                node.IsOpened = true;

                var nextLevel = level + 1;

                if (nextLevel < Settings.MaxDepth)
                {
                    HideLayers(nextLevel);

                    if (Settings.EnableQuickAdding)
                    {
                        await StartAddingAsync(nextLevel);
                    }
                }
            }
        }
    }

    private void HideLayers(int startingLevel)
    {
        for (int i = startingLevel; i < Settings.MaxDepth; i++)
        {
            layers[i] = Enumerable.Empty<NodeModel>();
            isAdding[i] = false;
        }
    }

    private void CloseNodes(int startingLevel)
    {
        for (var i = startingLevel; i < Settings.MaxDepth; i++)
        {
            if (layers[i] is not null)
            {
                foreach (var item in layers[i])
                {
                    item.IsOpened = false;
                }
            }
        }
    }

    private bool IsOpened(int level)
    {
        var result = layers[level]?.Any(x => x.IsOpened) == true;
        return result;
    }

    private NodeModel GetOpened(int level)
    {
        var result = layers[level].Single(x => x.IsOpened);
        return result;
    }

    private string GetNodeStyle(int level, NodeModel node)
    {
        if (!IsOpened(level))
        {
            return "btn btn-block btn-warning";
        }
        else
        {
            if (node.IsOpened)
            {
                return "btn btn-block btn-warning";
            }
            else
            {
                if (level == 0)
                {
                    return "d-none";
                }
                else
                {
                    return "btn btn-block btn-light";
                }
            }
        }
    }

    private void StopEditing()
    {
        for (int i = 0; i < isAdding.Count; i++)
        {
            isAdding[i] = false;
            isEditing[i] = false;
        }
    }

    private bool HasNodes(int level)
    {
        var result = layers[level]?.Any() == true;
        return result;
    }

    private bool IsLoaded()
    {
        var result = layers[0] is not null;
        return result;
    }

    private async Task StartAddingAsync(int level)
    {
        StopEditing();

        advice = null;

        isAdding[level] = true;

        var path = GetPath(level);
        var request = new AdviceRequestModel
            {
                Parents = path.Select(x => x.Name),
                Root = path.FirstOrDefault(),
                Mode = promptSettings.Mode,
                Engine = promptSettings.Engine,
                Creativity = promptSettings.Creativity
            };

        var adviceMessage = await HttpClient.PostAsJsonAsync($"api/GetAdvice", request);
        var adviceOptions = await adviceMessage.Content.ReadFromJsonAsync<IEnumerable<string>>();

        if (HasNodes(level))
        {
            var layer = layers[level];

            advice = adviceOptions.Where(ac => !layer.Any(node => node.Name.ToLowerInvariant() == ac.ToLowerInvariant()));
        }
        else
        {
            advice = adviceOptions;
        }
    }

    private IEnumerable<NodeModel> GetPath(int level)
    {
        var openPath = layers.Select(layer => layer.SingleOrDefault(node => node.IsOpened));
        var pathToItem = openPath.Take(level);
        return pathToItem;
    }

    private void StartEditing(int level)
    {
        StopEditing();

        var node = GetOpened(level);
        updatedNodeName = node.Name;

        isEditing[level] = true;
    }

    private async Task UpdateAsync(string updatedNodeName, int level)
    {
        var path = GetPath(level + 1);
        var ids = path.Select(x => x.Id);

        var request = new UpdateNodeRequestModel { UpdatedNodeName = updatedNodeName, Path = ids };

        var newNodeMessage = await HttpClient.PutAsJsonAsync("api/MindMap", request);
        var newNode = await newNodeMessage.Content.ReadFromJsonAsync<NodeModel>();

        var node = GetOpened(level);
        node.Name = newNode.Name;

        StopEditing();
    }

    private async Task DeleteAsync(int level)
    {
        StopEditing();

        var nodePath = GetPath(level + 1);
        var path = nodePath.Select(x => x.Id);
        var nodeId = path.Last();

        var request = new DeleteItemRequestModel { Path = path };
        var newNodeMessage = await HttpClient.PostAsJsonAsync("api/MindMap/Delete", request);

        HideLayers(level + 1);
        layers[level] = layers[level].Where(x => x.Id != nodeId);

        if (level > 0)
        {
            var parent = layers[level - 1].Single(x => x.IsOpened);
            parent.Children = parent.Children.Where(x => x.Id != nodeId);

            if (!layers[level].Any())
            {
                CloseNodes(level - 1);
            }
        }
    }
}
